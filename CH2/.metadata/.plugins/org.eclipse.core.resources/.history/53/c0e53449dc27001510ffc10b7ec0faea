import java.util.Arrays;
import java.util.Iterator;
import java.util.Comparator;

public class MaxPQ<Key> {
	private Key[] pq; 
	private int N;
	private Comparator<Key> comparator;
	
	public MaxPQ() {
		this(1);
	}
	
	@SuppressWarnings("unchecked")
	public MaxPQ(int initCapacity) {
		pq = (Key[]) new Object[N+1];
		N = 0;
	}
	
	public MaxPQ(Comparator<Key> comparator) {
		this(1, comparator);
	}
	
	public MaxPQ(int initCapacity, Comparator<Key> comparator) {
		this(initCapacity);
		this.comparator = comparator;
	}
	
	private void swim(int k) {
		while (k > 1 && less(k/2, k)) {
			exch(k, k/2);
			k = k/2;
		}
	}
	
	private void sink(int k) {
		while (2 * k <= N) {
			int j = 2*k;
			if (j < N && less(j,j+1)) j++;
			if (! less(k, j)) break;
			exch(k, j);
			k = j;
		}
	}
	
	@SuppressWarnings("unchecked")
	private boolean less(int i, int j) {
		if (!(comparator == null)) return (comparator.compare(pq[i], pq[j]) < 0);
		return ((Comparable<Key>) pq[i]).compareTo(pq[j]) < 0;
	}
	
	private void exch(int i, int j) {
		Key temp = pq[i]; pq[i] = pq[j]; pq[j] = temp;
	}
	
}
